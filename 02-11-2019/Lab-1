Manage Jenkins:
	Configure Systems	
	Configure Global Security
	Configure Credentials
	Global Tool Configurations
	Manage Plugins
	Manage Nodes
	https://linuxacademy.com/blog/devops/adding-a-jenkins-agent-node/
	Manage Users
	
Jenkins Jobs:
	Freestyle Project
	Maven Project
	Pipeline:
	Folder
	Multi branch Pipeline
	
Multi branch Pipeline:
	
Jenkins Parameters Jobs:
	
Pipeline Jobs:
	Pipeline Jobs basically needs a basic understanding of groovy language
	No need to install multiple plugins for execution
	In normal jobs error tracing will be a challenging part
	In Pipeline we split the code which help us to trace the error easily
	In Pipeline we break the execution process into stages
	In Pipeline maintaining the code is quite easy

Pipeline Jobs:
Create a Jenkins Pipeline Job

Pipeline:
	Pipeline Script:

// hello world groovy program
node {
   echo 'Hello World'
}

Pipeline:
	Pipeline Script:

// Github + Maven
node {
   def mvnHome
   stage('Preparation') { // for display purposes
      // Get some code from a GitHub repository
      git 'https://github.com/jglick/simple-maven-project-with-tests.git'
      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.           
      mvnHome = tool 'M3'
   }
   stage('Build') {
      // Run the maven build
      if (isUnix()) {
         sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package"
      } else {
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage('Results') {
      junit '**/target/surefire-reports/TEST-*.xml'
      archive 'target/*.jar'
   }
}

// Migration of code in Git from SubVersion:	Google it

Pipeline:
	Pipeline script from SCM:
	
Online Documentation:
	https://jenkins.io/doc/book/pipeline/

