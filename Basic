Jenkins Basic Overview:

Monitoring -> Polling the source code for any change -> Plugin
Checkout the code
Build
Unit testing / Code Coverage
Notification

Jenkins is an Orchestration Tool or Build Tool
Project in Jenkins
Jobs in Jenkins
Jenkins have Open Source and Enterprise Version (Hosted in Cloud, Need Licence)

Security => Role Based Access in Jenkins:
Default Read Access: Reader Role
Build Role: Builder Role -> Application Team
Configure Role: Configurer Role -> DevOps
Admin Access: Admin

Master have all the configuration of the Job
Slave is the actual executor of the Job

Build History
One Master and Multiple Slave we can configure

Jenkins Lab Server for testing:

New Job: 
Click on New Job-> Name -> Freestyle Project -> Ok 

Jenkins Workspace:
Source Code
Compiled Artifact

Important Plugins:
Changes; Workspace; Build with Parameters; Delete Project;
Configure; Metadata; Rebuild Last; Scheduled Build; Move
Failure Cause Management; Failure Scan Options; Job Config History
Purge Build History; Test Results Analyzer

Important Plugins:
New Item; People; Build History; Project Relationship; 
Check File Fingerprint; Selenium Grid; Manage Jenkins; 
Metadata Configuration; Metadata Search; Failure Cause Management;
My Views; Job Config History; Job Import Plugin; Restart Safety; 
JQS Monitoring; Plugin Usage; Global Configuration; Scriptor; 
Credentials; BI TADP Knowledge Management Site; 
Middleware Information Repository (MIRA); Jenkins Monitoring;
IBM Urban Code Deploy

Inside Jenkins Job:
BUILD_TIME_STAMP
Discard old builds
	Strategy: Log Rotation
		Days to keep build:
		Max: 20
Meta Data:
Sidebar links
Project is parameterized
	Boolean 
	Choice
Disable this project
Execute concurrent builds:
	JDK: Select
Restrict:
	Label: Any
SCM:
	Git/ SVN
	Generic credentials
	Rep Depth:
		Infinity: go till
		Empty: only deploy folder
		file: only the file
		Immediate: Immdidate
		As-it-is: as it is
	Ignore Externals: call another svn url (Mostly we does)
	Checkout Strategy: svn update
Use custom workspace: Limit the character
	Directory: 
	Display name:
Build Triggers:
	Build Periodically: 
		Schedule: Cron Job (M H D M D), it will always trigger
	Poll SCM: 
		Schedule: Same (H/15 * * * * ), trigger only if changes occurred
Build Env:
	Delete the workspace
	Add time stamp
	Set Env var
Build: 
	Console script, Run the script with the compilation
	Ex:
		Invoke Ant:
			Ant Version: ant-…
			Targets: clean prepare compile (set of instruction to perform)
			Build File: always relative file, dependent on checkout location
			Properties: 
				Hudson_home=D://Slave//Jenkins
				Workspace=$WORKSPACE
				buildNumber=$BUILD_NUMBER
				Env.HuDSON_HOME=D:\\slave\\jenkins
				Projectname=$JOB_NAME
				JAVA_HOME=$JAVA_HOME
				Svn.revision=$SVN_REVISION
				addDir=$WORKSPACE\\deploy\\..
			Java Options: 
Post Build Action:
	Used to publish
	Publish JUnit test result report
		Test: Location of xml
		Health: 1.0

Steps need to perform in Jenkins:
	1. Publishing unit testing/ code coverage results
	2. Uploading/ deploying the pkg to UCD (deployment tool)
	3. Email notifications 
	
Steps in Jenkins Job:
	Basic Configuration
	SVN Checkout
	Create/update build environment
	Build/unit test
	Package creation
	Upload pkg /deploy the pkg to UCD

Plugin used:
Post build actions:
	Publish artifacts to TADP IBM Urban code deploy server
		Version:Sept2017_REV$(SVN_REVISION)_B$(BUILD_NUMBER)
	
UCD: Urban Code Deployment

Application:
Component: Basic deployable unit
Comp process: steps for deploying ur component
Application process: steps for deploying an app
Environment: DI, ST,…
Resources: Servers
Version: Package

----

Ant Scripting: 

Ant Core Concepts:
Projects
Properties
Targets:
	Clean: cleaning the build o/p dir
	Compile: compiling the java source code in the project
	Jar/war/ear: creating a jar from the compiled classes
	Test: running all unit tests for the java code
Tasks
	Mkdir
	Copy
	Delete
	Javac
	Javadoc
	jar
Build Scripts: combining all above 4

Steps of deployment tools:
Pre deployment steps
Deployment (Copy)
Post deployment steps

Plugins

Basic deployment unit: component
Component process: steps for deployment for a component
Application: group of related components
Application process: steps for deployment of comp in an order 
Environments: DI, …
Resources/ Servers: Servers mapping the c/q components

Manage Plugin -> Installed -> DSL Plugin 

Build -> Process Job DSLs

----------

Structures in SVN:

	1. Branches: Have code for each and every release
	2. Trunk: Developing Latest code available/branch
	3. Tags: Any significant changes taken as for reference
	4. SVN Merge: Merging the code from two release

Release -> Detailed discussion

SVN Key words: 

SVN Checkout:
SVN Add:
SVN Delete:
SVN Commit:
SVN Update:
SVN revert:
Show log:

If a new file added after checkout:
Initial (?) -> svn add -> svn commit (a new revision no,green color symbol)
You can directly commit it

Note:
Jenkins:
	Checkout Strategy: Use 'svn update' as much as possible
-------
CBJ:
Access based on Groups

Jenkins Configurer Access:
Populate/Delete the Meta Data
	Builder-Configurer: Builder: ID

Overall read access:
	Groups Access: 
		Search the group name and click 
		Click: Add user group: Add the ID/DL
		
Note: 
	Groups Access: 
		Search the group name and click 
		Click on Configure: Click the checkbox

----
OSS:
Access based on Roles:
Manage Jenkins-> Manage Roles -> Select

Overall Build Access:
Manage Jenkins-> Assign Roles -> Select 
If new member then simply add it

Application Specific Build Access:
Manage Jenkins-> Script Console-> Paste the below Script

import hudson.*
import hudson.security.*
import java.util.*
import com.michelin.cio.hudson.plugins.rolestrategy.*
import java.lang.reflect.*

def ldapGroupName = "emsmith" # Enter and execute
def projectPrefix = ""
def RoleName = "NA-ELS_Developer"
  
def authStrategy = Hudson.instance.getAuthorizationStrategy()

if(authStrategy instanceof RoleBasedAuthorizationStrategy){
  RoleBasedAuthorizationStrategy roleAuthStrategy = (RoleBasedAuthorizationStrategy) authStrategy

  // Make constructors available
  Constructor[] constrs = Role.class.getConstructors();
  for (Constructor<?> c : constrs) {
    c.setAccessible(true);
  }
  // Make the method assignRole accessible
  Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod("assignRole", String.class, Role.class, String.class);
  assignRoleMethod.setAccessible(true);

  // Create role
  Set<Permission> permissions = new HashSet<Permission>();
  permissions.add(Permission.fromId("hudson.model.Item.Read"));
  permissions.add(Permission.fromId("hudson.model.Item.Build"));
  permissions.add(Permission.fromId("hudson.model.Item.Workspace"));
  permissions.add(Permission.fromId("hudson.model.Item.Cancel"));
  // The release permission is only available when the release plugin is installed
  String releasePermission = Permission.fromId("hudson.model.Item.Release");
  if (releasePermission != null) {
    permissions.add(releasePermission);
  }
  permissions.add(Permission.fromId("hudson.model.Run.Delete"));
  permissions.add(Permission.fromId("hudson.model.Run.Update"));
  Role newRole = new Role(RoleName, projectPrefix, permissions);
  roleAuthStrategy.addRole(RoleBasedAuthorizationStrategy.PROJECT, newRole);

  // assign the role
  roleAuthStrategy.assignRole(RoleBasedAuthorizationStrategy.PROJECT, newRole, ldapGroupName);
  
  println "OK"
}
else {
  println "Role Strategy Plugin not found!"
}
Role.groovy

Click on Run
