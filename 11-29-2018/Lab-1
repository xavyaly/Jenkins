LAB-1

Sample Python/<Any-Language-Project>			// Done
	Add the Git URL and Credentails
	Add the Execute Shell “python *lab-1”

Sample Maven Project	
	Fork any specific project
	Clone the project 		// git@github.com:xavyaly/game-of-life.git
	Push/Add the content into your GitHub repo
	Execute Manually 
		# /game-of-life/gameoflife-build	// pwd
		# mvn compile package			// default Test
		# ls -l target/gameoflife-build-1.0-SNAPSHOT.jar		// “.jar” file would be created for Java project
	Install a Plugin called “Maven Integration” in Jenkins
	Create a Maven Jenkins Job			
	Add the Git URL
	Add the Credentials
	Come to Build Section:
		Root POM: gameoflife-build/pom.xml		// Path of pom.xml
		Goals and options: compile pacakge		// 
	Save the Jenkins Job
	Build it
	# cd ~/.jenkins/workspace/
	# ls -l ~/.jenkins/workspace/sample-maven1-project/gameoflife-build/target/gameoflife-build-1.0-SNAPSHOT.jar


Sample Project on GitHub:

In GitHub:
	Settings -> Developer Settings -> Personal Access Token -> Generate New Token -> Give password 
	-> Token description: <any-token-name> OR IntegrationWithGitHub2-> 
	Select the checkbox for repo, admin:repo_hook, admin:org_hook -> Click on Generate token
	26d401940bab26a54321bea509f7c45d943a95de 	// copy somewhere, quite imp

In Jenkins:
	Credentials -> Jenkins -> Global credentials (unrestricted) -> Add Credentials -> 
	kind: Username with password
	Username: IntegrationWithGitHub2
	Password: 26d401940bab26a54321bea509f7c45d943a95de
	ID: jenkins-secret2

	kind: secret text
	secret: 26d401940bab26a54321bea509f7c45d943a95de
	ID: jenkins-token2
	
In Jenkins:
	Manage Jenkins -> Configure System -> GitHub -> 
	GitHub Server:
		Name: IntegrationWithGitHub2
		Credentials: jenkins-token2
		Test connection: // Credentials verified for user xavyaly, rate limit: 4993
		Select the checkbox of “Manage hooks”
		Click on Save

In Jenkins:
	Manage Jenkins -> Manage Plugins -> 
	Cross verify this Plugin “GitHub Branch Source Plugin”

In GIT:
	Fork a Project	// https://github.com/practicaljenkins/sample-php-project 
	Clone it in your local
	
Groovy Compiler:
	// https://www.jdoodle.com/execute-groovy-online	// For writing Jenkinsfile

In Jenkins:
	Create a Multibranch Pipeline Job
	Branch Sources:
		Select the GitHub
		Credentials: IntegrationWithGitHub2
		Owner: <ur-name>
		Repository: <project-name>
		Select the Behavior as per requirement
	Build Configuration:
		Default Jenkinsfile needed		// Mandatory to execute a Multibranch pipeline
	Click on Save
	It starts to execute all the branches 
	Scan the repository	// SUCCESS 
	Click on Job		// You can see the execution of each branch
	Click on individual Branch and try to fetch out the exact issues.

In CLI:
	Create a new branch
		# git branch
		# git checkout -b performance
		# git branch
		# git add -A OR git add .
		# git commit -m “added a new branch“
		# git push origin performance
		# git branch
		# ls -l
		# touch test		// performance branch
		# git status
		# git add .
		# git commit -m “added a new test file in performance branch“
		# git push origin performance
	Cross verify in your GitHub 	// New branch should reflect
	Cross verify in Jenkins Job	// New branch should reflect

Troubleshoot:
	New branch were not reflecting so we have created a new Job and 
	Populate all the required parameters 
	Execute again	// SUCCESS

In Jenkins:
	Push the changes
	Cross check the existing Jenkins Job

Troubleshoot the Jenkinsfile:
	Again save the Jenkins and it will execute automatically
